// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/energy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolarServiceClient is the client API for SolarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolarServiceClient interface {
	GetEnergyFromHomesByParams(ctx context.Context, in *PowerConsumptionRequest, opts ...grpc.CallOption) (SolarService_GetEnergyFromHomesByParamsClient, error)
<<<<<<< HEAD
=======
	GetEcoEnergyByParams(ctx context.Context, in *EcoEnergyRequest, opts ...grpc.CallOption) (SolarService_GetEcoEnergyByParamsClient, error)
>>>>>>> feature/energy_from_eco_sources
}

type solarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSolarServiceClient(cc grpc.ClientConnInterface) SolarServiceClient {
	return &solarServiceClient{cc}
}

func (c *solarServiceClient) GetEnergyFromHomesByParams(ctx context.Context, in *PowerConsumptionRequest, opts ...grpc.CallOption) (SolarService_GetEnergyFromHomesByParamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SolarService_ServiceDesc.Streams[0], "/solarservice.SolarService/GetEnergyFromHomesByParams", opts...)
	if err != nil {
		return nil, err
	}
	x := &solarServiceGetEnergyFromHomesByParamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SolarService_GetEnergyFromHomesByParamsClient interface {
	Recv() (*PowerFromHomes, error)
	grpc.ClientStream
}

type solarServiceGetEnergyFromHomesByParamsClient struct {
	grpc.ClientStream
}

func (x *solarServiceGetEnergyFromHomesByParamsClient) Recv() (*PowerFromHomes, error) {
	m := new(PowerFromHomes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solarServiceClient) GetEcoEnergyByParams(ctx context.Context, in *EcoEnergyRequest, opts ...grpc.CallOption) (SolarService_GetEcoEnergyByParamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SolarService_ServiceDesc.Streams[1], "/solarservice.SolarService/GetEcoEnergyByParams", opts...)
	if err != nil {
		return nil, err
	}
	x := &solarServiceGetEcoEnergyByParamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SolarService_GetEcoEnergyByParamsClient interface {
	Recv() (*EcoEnergy, error)
	grpc.ClientStream
}

type solarServiceGetEcoEnergyByParamsClient struct {
	grpc.ClientStream
}

func (x *solarServiceGetEcoEnergyByParamsClient) Recv() (*EcoEnergy, error) {
	m := new(EcoEnergy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SolarServiceServer is the server API for SolarService service.
// All implementations must embed UnimplementedSolarServiceServer
// for forward compatibility
type SolarServiceServer interface {
	GetEnergyFromHomesByParams(*PowerConsumptionRequest, SolarService_GetEnergyFromHomesByParamsServer) error
<<<<<<< HEAD
=======
	GetEcoEnergyByParams(*EcoEnergyRequest, SolarService_GetEcoEnergyByParamsServer) error
>>>>>>> feature/energy_from_eco_sources
	mustEmbedUnimplementedSolarServiceServer()
}

// UnimplementedSolarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSolarServiceServer struct {
}

func (UnimplementedSolarServiceServer) GetEnergyFromHomesByParams(*PowerConsumptionRequest, SolarService_GetEnergyFromHomesByParamsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEnergyFromHomesByParams not implemented")
<<<<<<< HEAD
=======
}
func (UnimplementedSolarServiceServer) GetEcoEnergyByParams(*EcoEnergyRequest, SolarService_GetEcoEnergyByParamsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEcoEnergyByParams not implemented")
>>>>>>> feature/energy_from_eco_sources
}
func (UnimplementedSolarServiceServer) mustEmbedUnimplementedSolarServiceServer() {}

// UnsafeSolarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolarServiceServer will
// result in compilation errors.
type UnsafeSolarServiceServer interface {
	mustEmbedUnimplementedSolarServiceServer()
}

func RegisterSolarServiceServer(s grpc.ServiceRegistrar, srv SolarServiceServer) {
	s.RegisterService(&SolarService_ServiceDesc, srv)
}

func _SolarService_GetEnergyFromHomesByParams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PowerConsumptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolarServiceServer).GetEnergyFromHomesByParams(m, &solarServiceGetEnergyFromHomesByParamsServer{stream})
}

type SolarService_GetEnergyFromHomesByParamsServer interface {
	Send(*PowerFromHomes) error
	grpc.ServerStream
}

type solarServiceGetEnergyFromHomesByParamsServer struct {
	grpc.ServerStream
}

func (x *solarServiceGetEnergyFromHomesByParamsServer) Send(m *PowerFromHomes) error {
<<<<<<< HEAD
=======
	return x.ServerStream.SendMsg(m)
}

func _SolarService_GetEcoEnergyByParams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EcoEnergyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolarServiceServer).GetEcoEnergyByParams(m, &solarServiceGetEcoEnergyByParamsServer{stream})
}

type SolarService_GetEcoEnergyByParamsServer interface {
	Send(*EcoEnergy) error
	grpc.ServerStream
}

type solarServiceGetEcoEnergyByParamsServer struct {
	grpc.ServerStream
}

func (x *solarServiceGetEcoEnergyByParamsServer) Send(m *EcoEnergy) error {
>>>>>>> feature/energy_from_eco_sources
	return x.ServerStream.SendMsg(m)
}

// SolarService_ServiceDesc is the grpc.ServiceDesc for SolarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solarservice.SolarService",
	HandlerType: (*SolarServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEnergyFromHomesByParams",
			Handler:       _SolarService_GetEnergyFromHomesByParams_Handler,
<<<<<<< HEAD
=======
			ServerStreams: true,
		},
		{
			StreamName:    "GetEcoEnergyByParams",
			Handler:       _SolarService_GetEcoEnergyByParams_Handler,
>>>>>>> feature/energy_from_eco_sources
			ServerStreams: true,
		},
	},
	Metadata: "proto/energy.proto",
}
